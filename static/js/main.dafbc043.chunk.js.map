{"version":3,"sources":["getWeb3.js","Table.js","Form.js","Content.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","Table","className","this","props","candidates","map","candidate","key","id","name","voteCount","React","Component","Form","onSubmit","event","preventDefault","candidateId","value","castVote","ref","input","type","Content","hasVoted","href","account","App","componentDidMount","eth","getAccounts","accounts","setState","net","getId","networkId","Election","networks","election","Contract","abi","methods","candidatesCount","call","i","state","voter","voters","loading","alert","error","voting","vote","send","from","on","hash","bind","watchEvents","votedEvent","fromBlock","toBlock","watch","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dafbc043.chunk.js","sourcesContent":["import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Acccounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:8545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n","import React from 'react';\r\n\r\nclass Table extends React.Component{\r\n    render(){\r\n        return(\r\n            <table className='table table-hover'>\r\n                <thead className='thead-dark'>\r\n                    <tr>\r\n                        <th>ID</th>\r\n                        <th>Name</th>\r\n                        <th>Votes</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {this.props.candidates.map((candidate, key) => {\r\n                        return(\r\n                            <tr key={key}>\r\n                                <th>{candidate.id}</th>\r\n                                <th>{candidate.name}</th>\r\n                                <th>{candidate.voteCount}</th>\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\nexport default Table;","import React from 'react';\r\n\r\nclass Form extends React.Component{\r\n    render(){\r\n        return(\r\n            <form onSubmit={(event) => {\r\n                event.preventDefault();\r\n                const candidateId = this.candidateId.value\r\n                this.props.castVote(candidateId);\r\n            }}>\r\n                <div className='form-group'>\r\n                    <label><strong>SELECT CANDIDATE</strong></label>\r\n                    <select ref={(input) => this.candidateId = input} className='form-control'>\r\n                        {this.props.candidates.map((candidate, key) => {\r\n                            return(\r\n                                <option key={key} value={candidate.id}>{candidate.name}</option>\r\n                            );\r\n                        })}\r\n                    </select>\r\n                </div>\r\n                <button type='submit' className='btn btn-primary'><strong>Vote</strong></button>\r\n                <hr/>\r\n            </form>\r\n        );\r\n    }\r\n}\r\nexport default Form;","import React from 'react';\r\nimport Table from './Table';\r\nimport Form from './Form';\r\n\r\nclass Content extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Table candidates = {this.props.candidates} />\r\n                <hr/>\r\n                {!this.props.hasVoted ?\r\n                    <Form candidates = {this.props.candidates} castVote = {this.props.castVote} />\r\n                    : null\r\n                }\r\n                <a href={\"https://etherscan.io/address/\" + this.props.account} className='account'><strong>Voter Account: {this.props.account}</strong></a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Content;","import React, { Component } from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport getWeb3 from \"./getWeb3\";\r\nimport Election from \"./contracts/Election.json\";\r\nimport Content from \"./Content\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport \"./App.css\";\r\n\r\nclass App extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      account: '',\r\n      candidates: [],\r\n      hasVoted: false,\r\n      loading: true,\r\n      voting: false,\r\n      web3: null,\r\n      accounts: null,\r\n      election: null\r\n    }\r\n\r\n    this.castVote = this.castVote.bind(this);\r\n    this.watchEvents = this.watchEvents.bind(this);\r\n  }\r\n\r\n  componentDidMount = async() => {\r\n    // TODO: Refactor with promise chain\r\n    try{\r\n      const web3 = await getWeb3();\r\n\r\n      // Use web3 to get the user's accounts.\r\n      const accounts = await web3.eth.getAccounts();\r\n      console.log(accounts);\r\n      this.setState({ account: accounts[0] });\r\n\r\n      // Get the contract instance.\r\n      const networkId = await web3.eth.net.getId();\r\n      const networkData = Election.networks[networkId];\r\n      const election = new web3.eth.Contract(Election.abi, '0xcDdE6C7A5ABA888056D75bD2Ad4FCd5952A04542');\r\n\r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      this.setState({ web3, accounts, election });\r\n\r\n      const candidatesCount = await election.methods.candidatesCount().call();\r\n      this.setState({ candidatesCount });\r\n\r\n      for(var i=1; i<=candidatesCount; i++){\r\n          const candidate = await election.methods.candidates(i).call();\r\n            this.setState({ \r\n              candidates: [...this.state.candidates, candidate]\r\n            });\r\n          }\r\n      const voter = election.methods.voters(this.state.account).call();\r\n        this.setState({ \r\n          hasVoted: voter.hasVoted,\r\n          loading: false \r\n        });\r\n      }\r\n      catch(error){\r\n        // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n      }\r\n  }\r\n\r\n  watchEvents(){\r\n    // TODO: trigger event when vote is counted, not when component renders\r\n    this.election.votedEvent({}, {\r\n      fromBlock: 0,\r\n      toBlock: 'latest'\r\n    }).watch((error, event) => {\r\n      this.setState({voting: false});\r\n    });\r\n  }\r\n\r\n  castVote = candidateId => {\r\n    this.setState({voting: true});\r\n    this.state.election.methods.vote(candidateId).send({from: this.state.account}).on('transactionHash', (hash) => {\r\n      this.setState({\r\n        hasVoted: true,\r\n        voting: false,\r\n        loading: false\r\n      });\r\n    });\r\n  }\r\n   render(){\r\n     return(\r\n       <div className='row'>\r\n          <div className='col-lg-12 text-center'>\r\n            <h1>Election Results</h1>\r\n            <br/>\r\n            {this.state.loading || this.state.voting\r\n              ? <p className='text-center'>Loading...</p>\r\n              : <Content\r\n                  account = {this.state.account}\r\n                  candidates = {this.state.candidates}\r\n                  hasVoted = {this.state.hasVoted}\r\n                  castVote = {this.castVote} />      \r\n            }\r\n          </div> \r\n       </div>\r\n     );\r\n   }\r\n}\r\n\r\n//ReactDOM.render(<App />, document.getElementById('root'));\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}